// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	httprouter "github.com/julienschmidt/httprouter"
	mock "github.com/stretchr/testify/mock"
)

// APIHandler is an autogenerated mock type for the APIHandler type
type APIHandler struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: w, r, ps
func (_m *APIHandler) CreateUser(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	_m.Called(w, r, ps)
}

// GetUser provides a mock function with given fields: w, r, ps
func (_m *APIHandler) GetUser(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	_m.Called(w, r, ps)
}

// GetUserByID provides a mock function with given fields: w, r, ps
func (_m *APIHandler) GetUserByID(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	_m.Called(w, r, ps)
}

// UpdateUser provides a mock function with given fields: w, r, ps
func (_m *APIHandler) UpdateUser(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	_m.Called(w, r, ps)
}

// NewAPIHandler creates a new instance of APIHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIHandler {
	mock := &APIHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
