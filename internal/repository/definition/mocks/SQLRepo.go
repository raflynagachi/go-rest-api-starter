// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/raflynagachi/go-rest-api-starter/internal/model"

	request "github.com/raflynagachi/go-rest-api-starter/internal/dto/web/request"

	sqlx "github.com/jmoiron/sqlx"
)

// SQLRepo is an autogenerated mock type for the SQLRepo type
type SQLRepo struct {
	mock.Mock
}

// CountUser provides a mock function with given fields: ctx, filter
func (_m *SQLRepo) CountUser(ctx context.Context, filter request.UserFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, filter
func (_m *SQLRepo) GetUser(ctx context.Context, filter request.UserFilter) ([]*model.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) ([]*model.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) []*model.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *SQLRepo) GetUserByID(ctx context.Context, id int64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, tx, user
func (_m *SQLRepo) InsertUser(ctx context.Context, tx *sqlx.Tx, user *model.User) (int64, error) {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *model.User) (int64, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *model.User) int64); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxBegin provides a mock function with given fields:
func (_m *SQLRepo) TxBegin() (*sqlx.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxBegin")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxEnd provides a mock function with given fields: tx, err
func (_m *SQLRepo) TxEnd(tx *sqlx.Tx, err error) error {
	ret := _m.Called(tx, err)

	if len(ret) == 0 {
		panic("no return value specified for TxEnd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, error) error); ok {
		r0 = rf(tx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, tx, user
func (_m *SQLRepo) UpdateUser(ctx context.Context, tx *sqlx.Tx, user *model.User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *model.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSQLRepo creates a new instance of SQLRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLRepo {
	mock := &SQLRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
