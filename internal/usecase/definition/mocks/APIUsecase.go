// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/raflynagachi/go-rest-api-starter/internal/dto/web/request"

	response "github.com/raflynagachi/go-rest-api-starter/internal/dto/web/response"
)

// APIUsecase is an autogenerated mock type for the APIUsecase type
type APIUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *APIUsecase) CreateUser(ctx context.Context, _a1 *request.CreateUpdateUserReq) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.CreateUpdateUserReq) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, filter
func (_m *APIUsecase) GetUser(ctx context.Context, filter request.UserFilter) (*response.ListResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *response.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) (*response.ListResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.UserFilter) *response.ListResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *APIUsecase) GetUserByID(ctx context.Context, id int64) (*response.UserResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*response.UserResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *response.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, _a2
func (_m *APIUsecase) UpdateUser(ctx context.Context, id int64, _a2 *request.CreateUpdateUserReq) error {
	ret := _m.Called(ctx, id, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *request.CreateUpdateUserReq) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAPIUsecase creates a new instance of APIUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIUsecase {
	mock := &APIUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
